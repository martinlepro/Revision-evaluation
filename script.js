// script.js (Version compl√®te mise √† jour pour fonctionner avec le serveur proxy OpenAI)

// --- FONCTIONS DE D√âBOGAGE PERSONNALIS√âES ---
// (Les fonctions de logging restent inchang√©es et sont critiques pour le d√©bogage)

// CHANGEMENT CRITIQUE 1 : D√©clar√© avec 'let' et initialis√© √† null pour √™tre affect√© plus tard
let debugElement = null; 

const originalConsoleLog = console.log;
const originalConsoleWarn = console.warn;
const originalConsoleError = console.error;
const VERSION_INFO = "v15 - Correction Cold Start et Logs - 11/10/2025 √† 18:19"; 

// Les appels console.info sont maintenant D√âPLAC√âS dans le bloc DOMContentLoaded !

function appendToDebug(message, type = 'log') {
    // La v√©rification est CRITIQUE (elle ne passe que si l'√©l√©ment a √©t√© trouv√© dans DOMContentLoaded)
    if (debugElement) {
        const p = document.createElement('p');
        p.style.whiteSpace = 'pre-wrap';
        p.textContent = `[${type.toUpperCase()}] ${new Date().toLocaleTimeString()} : ${message}`;
        if (type === 'error') {
            p.style.color = '#ff6b6b';
        } else if (type === 'warn') {
            p.style.color = '#ffe082';
        } else if (type === 'info') {
            p.style.color = '#aed7ff';
        } else {
            p.style.color = 'yellow';
        }
        if (debugElement.firstChild) {
            debugElement.insertBefore(p, debugElement.firstChild);
        } else {
            debugElement.appendChild(p);
        }
        while (debugElement.childElementCount > 50) {
            debugElement.removeChild(debugElement.lastChild);
        }
    }
}

// --- FONCTIONS UTILITAIRES POUR L'INTERFACE ET LE CHARGEMENT ---

/**
 * Affiche ou masque l'√©tat de chargement dans le pied de page du quiz.
 * @param {boolean} isLoading - True pour afficher, False pour masquer.
 */
function showLoading(isLoading) {
    const feedbackDiv = document.getElementById('ai-generation-feedback');
    
    // Si la g√©n√©ration est termin√©e (isLoading = false), on vide le message.
    if (!isLoading) {
        feedbackDiv.innerHTML = '';
    } 
    // Note : Le message de chargement d√©taill√© est d√©j√† g√©r√© par startQuiz,
    // donc cette fonction sert principalement de drapeau d'√©tat pour la fin.
}

/**
 * Affiche un message d'erreur dans l'interface et dans la console de d√©bogage.
 * @param {string} message - Le message d'erreur √† afficher.
 */
function showError(message) {
    const feedbackDiv = document.getElementById('ai-generation-feedback');
    
    // Affichage dans le feedback box
    feedbackDiv.innerHTML = `<p class="error" style="color: #dc3545; font-weight: bold;">üö® ERREUR : ${message}</p>`;

    // Si la fonction appendToDebug existe, on l'utilise
    if (typeof appendToDebug === 'function') {
        appendToDebug(`[AFFICHAGE UTILISATEUR] ${message}`, 'error');
    }
}

/**
 * Fonction utilitaire pour cr√©er un d√©lai (utilis√©e pour simuler le cold start).
 * @param {number} ms - Le temps de pause en millisecondes.
 */
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

console.log = function(...args) {
    originalConsoleLog.apply(console, args); 
    const message = args.map(arg => typeof arg === 'object' ? JSON.stringify(arg, null, 2) : String(arg)).join(' ');
    appendToDebug(message, 'log');
};
console.warn = function(...args) {
    originalConsoleWarn.apply(console, args); 
    const message = args.map(arg => typeof arg === 'object' ? JSON.stringify(arg, null, 2) : String(arg)).join(' ');
    appendToDebug(message, 'warn');
};
console.error = function(...args) {
    originalConsoleError.apply(console, args); 
    const message = args.map(arg => typeof arg === 'object' ? JSON.stringify(arg, null, 2) : String(arg)).join(' ');
    appendToDebug(message, 'error');
};

// ... (le reste du code, comme les variables globales, ne change pas jusqu'√† DOMContentLoaded)
console.log("script.js charg√©. Logging personnalis√© actif.");

// --- Variables Globales ---
const MATIERES_BASE_PATH = 'matieres';
let selectedItems = []; 
let currentQuizData = []; 
let currentQuestionIndex = 0;
let totalQuizPoints = 0; 
let userScore = 0; 
let isQuizRunning = false;

// REMPLACER PAR L'URL DE VOTRE SERVEUR RENDER
const BASE_API_URL = 'https://cle-api.onrender.com';
const CORRECTION_API_URL = `${BASE_API_URL}/correction`;
const GENERATION_API_URL = `${BASE_API_URL}/generate`; // <-- CORRECTION ICI !
const TTS_API_URL = `${BASE_API_URL}/tts`; 
// --- NOUVELLES CONSTANTES POUR LE SCORING ---
const TARGET_QUIZ_POINTS = 20;
const MIN_QUESTIONS = 5;
const MAX_QUESTIONS = 10;
// ---------------------------------------------

console.log(`URL de l'API Backend: ${BASE_API_URL}`);

const QUIZ_API_ENDPOINT = 'https://cle-api.onrender.com/generate';
async function fetchQuizData(subject) {
    console.log(`D√©but de la g√©n√©ration du quiz pour le sujet: ${subject}`);
    showLoading(true);
    
    // Le prompt 'system' d√©finit le comportement de l'IA.
    const systemPrompt = `Vous √™tes un g√©n√©rateur de quiz d'histoire et de g√©ographie pour des √©l√®ves de 3e. Votre r√©ponse DOIT √™tre uniquement un tableau JSON, SANS aucun texte d'introduction ou d'explication. Le tableau doit contenir 5 objets QuizQuestion, chaque objet ayant la structure suivante : { type: string (soit 'mcq' pour choix multiple, soit 'short_answer' pour r√©ponse courte, soit 'long_answer' pour r√©daction), question: string, options: array (liste des choix pour mcq, vide pour short_answer/long_answer), answer: string (la bonne r√©ponse), explanation: string (explication courte), maxPoints: number (points maximum pour la question, 1 pour mcq/short_answer, 5 pour long_answer) }.`;
    
    // Le prompt 'user' d√©finit la t√¢che sp√©cifique.
    const userPrompt = `G√©n√©rer un quiz de 5 questions sur le th√®me: "${subject}". Le quiz doit contenir 2 questions √† choix multiples (mcq), 2 questions √† r√©ponse courte (short_answer), et 1 question de r√©daction (long_answer).`;
    
    // Structure de l'objet √† envoyer, compatible avec le server.js
    const payload = {
        prompt: {
            system: systemPrompt,
            user: userPrompt
        }
    };
    
    try {
        const response = await fetch(QUIZ_API_ENDPOINT, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload) // Envoi du payload structur√©
        });

        if (response.status === 429) {
            console.error('Erreur 429: Limite de d√©bit atteinte pour toutes les cl√©s API. Veuillez r√©essayer dans 30 minutes.');
            showError('Limite de d√©bit atteinte pour toutes les cl√©s API. Veuillez r√©essayer dans 30 minutes.');
            return null;
        }

        if (!response.ok) {
            const errorData = await response.json();
            console.error('Erreur API:', response.status, errorData.error);
            showError(`Erreur du serveur proxy : ${errorData.details || errorData.error || response.statusText}.`);
            return null;
        }

        // ... Le reste de la fonction reste inchang√© : traitement et parsing JSON de la r√©ponse API
        const data = await response.json();
        
        // Extraction du texte de la r√©ponse (qui devrait √™tre le JSON brut)
        const jsonText = data.choices[0].message.content.trim();
        
        // ... (suite de la fonction pour le parsing et l'affichage) ...

        // Tentative de nettoyer le JSON (si l'IA a mis des balises comme ```json)
        const cleanedJsonText = jsonText.replace(/^```json\s*/, '').replace(/\s*```$/, '');

        // Parsing du JSON pour obtenir le tableau de questions
        const quizData = JSON.parse(cleanedJsonText);
        
        return quizData;

    } catch (error) {
        console.error('Erreur fatale lors de la communication avec le serveur ou du traitement JSON:', error);
        showError('Impossible de contacter le serveur ou de lire la r√©ponse. V√©rifiez le log du serveur et l\'URL.');
        return null;
    } finally {
        showLoading(false);
    }
}

const STRUCTURE = {
    // CORRECTION CL√â : Pas d'accent dans Mathematiques
    "Mathematiques": {
        "T1_STATISTIQUES": [
            { name: "Statistiques", file: "Mathematiques/T1_STATISTIQUES/Statistiques.txt", type: "qcm" }
        ],
        "G1-Triangles et proportionnalit√©": [
            { name: "Triangles et proportionnalit√©", file: "Mathematiques/G1-Triangles et proportionnalit√©/Triangles et proportionnalit√©.txt", type: "qcm" },
            { name: "Les aires", file: "Mathematiques/G1-Triangles et proportionnalit√©/Les aires.txt", type: "qcm" }
        ]
    },
    "Francais": {
        "√âcriture": [
            { name: "Qui est je", file: "Francais/√âcriture/Qui est je.txt", type: "paragraphe" },
            { name: "Autoportrait", file: "Francais/√âcriture/Autoportrait.txt", type: "paragraphe" }
        ],
        "Analyse": [
            { name: "Analyse d'un texte", file: "Francais/Analyse/Analyse d'un texte .txt", type: "paragraphe" }
        ],
        "Conjugaison": [
             { name: "Le Pr√©sent (Indicatif)", file: "Francais/Conjugaison/Le Pr√©sent (Indicatif).txt", type: "dictation" }
        ]
    },
    // CORRECTION CL√â : Anglais avec A majuscule
    "Anglais": {
        "Culture": [
            { name: "Les pays anglophones", file: "Anglais/Culture/Les pays anglophones.txt", type: "qcm" }
        ]
    },
    "Histoire_Geo": { // CL√â : Avec underscore
        "Histoire": [
            { name: "1er-Guerre-Mondiale", file: "Histoire_Geo/Histoire/1er-Guerre-Mondiale.txt", type: "mixte" }
        ]
    },
    "Science-de-la-Vie-et-de-la-Terre": {
        "Biologie": [
            { name: "Le programme g√©n√©tique", file: "Science-de-la-Vie-et-de-la-Terre/Biologie/Le programme g√©n√©tique.txt", type: "mixte" },
            { name: "L'H√©r√©dit√© (G√©n√©tique)", file: "Science-de-la-Vie-et-de-la-Terre/Biologie/L'H√©r√©dit√© (G√©n√©tique).txt", type: "mixte" }
        ]
    },
    // CL√â : technologie en minuscules
    "technologie": {
        "Syst√®mes": [
            { name: "Les syst√®mes automatis√©s", file: "technologie/Syst√®mes/Les syst√®mes automatis√©s.txt", type: "mixte" }
        ]
    },
    "Physique-Chimie": {
        "Chimie": [
            { name: "Atomes et Tableau P√©riodique", file: "Physique-Chimie/Chimie/Atomes et Tableau P√©riodique.txt", type: "mixte" }
        ]
    },
    "Art-Plastiques": {
        "M√©thodologie": [
            { name: "Analyser une ≈ìuvre d'art", file: "Art-Plastiques/M√©thodologie/M√©thode pour analyser une ≈ìuvre d'art.txt", type: "paragraphe" }
        ]
    },
    "musique": {
        "Histoire": [
            { name: "Chanson engag√©e", file: "musique/Histoire/Chanson engag√©e.txt", type: "paragraphe" }
        ]
    }
};

// D√©but du fichier script (14).js

// (Vos variables globales comme debugElement, originalConsoleLog, VERSION_INFO...)

// --- D√âBUT DU BLOC UNIQUE DOMContentLoaded ---
document.addEventListener('DOMContentLoaded', () => {
    
    // 1. INITIALISATION DE L'√âL√âMENT DE D√âBOGAGE
    debugElement = document.getElementById('debug');
    
    // 2. AFFICHAGE DES LOGS DE VERSION DANS LA CONSOLE
    if (debugElement) {
        console.info(`[VERSION] D√©ploiement actif : ${VERSION_INFO}`);
        console.info(`[RENDER] API de g√©n√©ration : ${GENERATION_API_URL}`);
        console.log("script.js charg√©. Logging personnalis√© actif.");
    }

    // 3. RENDU DU MENU (DOIT √äTRE FAIT AVANT D'ASSOCIER LES √âCOUTEURS DE CLIC)
    renderMenu();

    // 4. ASSOCIATION DES BOUTONS DE D√âMARRAGE (LA VRAIE CORRECTION)
    console.log("Configuration des boutons de quiz...");
    // üö® NOUVEAU LOG DE CONTR√îLE CRITIQUE
    console.log("--- D√©marrage de la v√©rification des IDs de boutons ---"); 

    // --- Mixte ---
    const mixteBtn = document.getElementById('start-mixte-quiz-btn');
    if (mixteBtn) {
        console.log("‚úÖ ID TROUV√â: start-mixte-quiz-btn. Attachement de l'√©couteur.");
        mixteBtn.addEventListener('click', () => {
            console.log("üî• Clic Intercept√©: D√©marrage du Quiz 'mixte'."); 
            startQuiz('mixte'); 
        });
    } else {
        console.error("‚ùå ID MANQUANT: start-mixte-quiz-btn. V√©rifiez l'ID dans votre HTML.");
    }

    // --- QCM ---
    const qcmBtn = document.getElementById('start-qcm-btn');
    if (qcmBtn) {
        console.log("‚úÖ ID TROUV√â: start-qcm-btn. Attachement de l'√©couteur.");
        qcmBtn.addEventListener('click', () => {
            console.log("üî• Clic Intercept√©: D√©marrage du Quiz 'qcm'."); 
            startQuiz('qcm'); 
        });
    } else {
        console.error("‚ùå ID MANQUANT: start-qcm-btn. V√©rifiez l'ID dans votre HTML.");
    }

    // --- Paragraphe ---
    const paragrapheBtn = document.getElementById('start-paragraphe-btn');
    if (paragrapheBtn) {
        console.log("‚úÖ ID TROUV√â: start-paragraphe-btn. Attachement de l'√©couteur.");
        paragrapheBtn.addEventListener('click', () => {
            console.log("üî• Clic Intercept√©: D√©marrage du Quiz 'paragraphe'."); 
            startQuiz('paragraphe'); 
        });
    } else {
        console.error("‚ùå ID MANQUANT: start-paragraphe-btn. V√©rifiez l'ID dans votre HTML.");
    }

    // --- Dict√©e ---
    const dictationBtn = document.getElementById('start-dictation-btn');
    if (dictationBtn) {
        console.log("‚úÖ ID TROUV√â: start-dictation-btn. Attachement de l'√©couteur.");
        dictationBtn.addEventListener('click', () => {
            console.log("üî• Clic Intercept√©: D√©marrage du Quiz 'dictation'."); 
            startQuiz('dictation'); 
        });
    } else {
        console.error("‚ùå ID MANQUANT: start-dictation-btn. V√©rifiez l'ID dans votre HTML.");
    }

    // --- Trouver l'Erreur ---
    const spotErrorBtn = document.getElementById('start-spot-error-btn');
    if (spotErrorBtn) {
        console.log("‚úÖ ID TROUV√â: start-spot-error-btn. Attachement de l'√©couteur.");
        spotErrorBtn.addEventListener('click', () => {
            console.log("üî• Clic Intercept√©: D√©marrage du Quiz 'spot_error'."); 
            startQuiz('spot_error'); 
        });
    } else {
        console.error("‚ùå ID MANQUANT: start-spot-error-btn. V√©rifiez l'ID dans votre HTML.");
    }
    
    // 5. AUTRES BOUTONS ET MISE √Ä JOUR INITIALE
    // Le bouton "Question Suivante"
    document.getElementById('next-question-btn').addEventListener('click', nextQuestion);

    // Mise √† jour de l'√©tat initial
    updateSelectedBox();
    //updateStartButtonsVisibility(); // Cette fonction est CRITIQUE !
});
function renderMenu() {
    const menuContainer = document.getElementById('menu-container');
    let html = '';
    for (const matiere in STRUCTURE) {
        html += `<div class="matiere"><h2>${matiere}</h2>`;
        for (const subMatiere in STRUCTURE[matiere]) {
            html += `<div class="sub-matiere"><h3>${subMatiere}</h3><ul>`;
            STRUCTURE[matiere][subMatiere].forEach(item => {
                const path = getItemPath(matiere, subMatiere, item);
                const isSelected = selectedItems.some(sel => sel.path === path);
                html += `
                    <li>
                        <label>
                            <input 
                                type="checkbox" 
                                data-path="${path}" 
                                data-name="${item.name}" 
                                onchange="toggleSelection(this)" // <-- R√©tablir cet appel !
                                ${isSelected ? 'checked' : ''}
                            >
                            ${item.name} (${item.type || 'Fichier'})
                        </label>
                    </li>
                `;
            });
            html += `</ul></div>`;
        }
        html += `</div>`;
    }
    menuContainer.innerHTML = html;
    // La fonction updateSelectedBox() doit √™tre appel√©e ici apr√®s le chargement du menu.
    updateSelectedBox(); 
}
// ... (Vos variables globales comme currentQuizData, selectedItems, etc.)

/**
 * V√©rifie la r√©ponse pour une question √† choix multiples (QCM) ou Vrai/Faux.
 * Met √† jour le score de l'utilisateur et affiche la correction.
 */
function checkQCMAnswer() {
    const currentQuestion = currentQuizData[currentQuestionIndex];
    const correctionFeedbackDiv = document.getElementById('correction-feedback');
    const questionType = currentQuestion.type ? currentQuestion.type.toLowerCase() : '';

    // D√©termine le nom de l'√©l√©ment HTML (QCM ou Vrai/Faux)
    const radioName = (questionType === 'qcm' || questionType === 'mcq') ? 'qcm_answer' : 'vrai_faux_answer';
    
    // R√©cup√®re l'option s√©lectionn√©e par l'utilisateur
    const selectedRadio = document.querySelector(`input[name="${radioName}"]:checked`);
    
    if (!selectedRadio) {
        alert("Veuillez s√©lectionner une option avant de valider la r√©ponse !");
        return;
    }
    
    const userAnswer = selectedRadio.value;
    const correctAnswer = currentQuestion.answer;
    const maxPoints = currentQuestion.maxPoints || 1;
    let feedbackHTML = '';
    let isCorrect = false;

    // Comparaison de la r√©ponse
    if (userAnswer.trim() === correctAnswer.trim()) {
        isCorrect = true;
        userScore += maxPoints;
        feedbackHTML = `<p class="alert-success">‚úÖ **Bonne r√©ponse !** Vous gagnez ${maxPoints} point(s).</p>`;
    } else {
        feedbackHTML = `<p class="alert-danger">‚ùå **Mauvaise r√©ponse.** Vous ne gagnez aucun point.</p>`;
    }

    // Affichage de la correction
    feedbackHTML += `<p>La bonne r√©ponse √©tait : **${correctAnswer}**.</p>`;
    feedbackHTML += `<p>Explication : ${currentQuestion.explanation || "Aucune explication fournie par l'IA."}</p>`;

    correctionFeedbackDiv.innerHTML = feedbackHTML;
    
    // D√©sactiver tous les boutons radio apr√®s la validation pour √©viter de changer la r√©ponse
    document.querySelectorAll(`input[name="${radioName}"]`).forEach(radio => {
        radio.disabled = true;
        // Met en √©vidence la bonne r√©ponse
        if (radio.value === correctAnswer) {
            radio.parentElement.style.fontWeight = 'bold';
            radio.parentElement.style.color = 'green';
        }
    });

    // Masque le bouton de validation et affiche le bouton "Question Suivante"
    const validateButton = document.querySelector(`div.${questionType}-question button`);
    if (validateButton) validateButton.style.display = 'none';

    document.getElementById('next-question-btn').style.display = 'block';
}

// --- NOUVELLE FONCTION : GESTION DE L'INTERFACE DE D√âMARRAGE ---
function updateStartButtonsVisibility() {
    // V√©rifie si le tableau des sujets s√©lectionn√©s n'est pas vide
    const isItemSelected = selectedItems.length > 0; 
    
    // S√©lectionne tous les boutons qui ont la classe 'start-btn'
    const startButtons = document.querySelectorAll('.start-btn'); 
    
    // Met √† jour l'attribut 'disabled' et l'opacit√© pour le feedback visuel
    startButtons.forEach(button => {
        button.disabled = !isItemSelected; 
        button.style.opacity = isItemSelected ? 1.0 : 0.5;
    });

    // Mise √† jour de la bo√Æte de s√©lection visuelle
    document.getElementById('selected-box').style.backgroundColor = isItemSelected ? '#d4edda' : '#e9ecef'; // Couleur verte si s√©lectionn√©
    document.getElementById('selected-items').textContent = isItemSelected ? selectedItems.map(i => i.name).join(', ') : 'Aucun sujet s√©lectionn√©.';
}

// ... (Le reste de vos fonctions comme startQuiz, displayCurrentQuestion, etc.)

function getItemPath(matiere, subMatiere, item) {
    // CORRECTION : On utilise SIMPLEMENT la valeur d√©j√† format√©e dans item.file
    // Elle contient d√©j√† : "Anglais/Culture/Les pays anglophones.txt"
    return item.file;
}

// --- Nouvelle Fonction : GESTION DU STYLE ET DES DONN√âES ---

function toggleSelection(checkbox) {
    console.log("toggleSelection ex√©cut√©e pour:", checkbox.dataset.name, "Checked:", checkbox.checked);
    // 1. G√âRER LE STYLE VISUEL (Corrige le probl√®me de couleur/bouton "pas normal")
    // Trouve l'√©l√©ment <li> parent le plus proche, o√π la classe 'selected' est appliqu√©e
    const listItem = checkbox.closest('li');
    
    if (listItem) {
        // Applique ou retire la classe 'selected' pour changer la couleur du fond
        if (checkbox.checked) {
            listItem.classList.add('selected');
        } else {
            listItem.classList.remove('selected');
        }
    }

    // 2. G√âRER LES DONN√âES (Ceci est la correction du bug initial "Veuillez choisir un sujet")
    // Elle appelle la fonction qui lit le DOM et remplit le tableau 'selectedItems'.
    updateSelectedBox(); 
}

// Variable globale (assurez-vous que cette ligne est en haut du script)
// DANS script.js
// Assurez-vous que 'selectedItems' est d√©clar√© globalement : let selectedItems = [];

function updateSelectedBox() {
    // 1. Lire toutes les checkboxes COCH√âES sur la page
    const checkboxes = document.querySelectorAll('input[type="checkbox"]:checked');
    
    // 2. Vider et remplir le tableau global 'selectedItems'
    selectedItems = [];
    const selectedNames = [];

    checkboxes.forEach(checkbox => {
        // Ces data-attributs sont CRITIQUES. Ils doivent √™tre pr√©sents sur vos checkboxes.
        const path = checkbox.dataset.path; 
        const name = checkbox.dataset.name; 

        if (path && name) {
            // Remplir le tableau global qui est v√©rifi√© par startQuiz
            selectedItems.push({ path: path, name: name });
            selectedNames.push(name);
        }
    });

    // 3. Mettre √† jour l'affichage dans la bo√Æte de s√©lection
    const selectedItemsSpan = document.getElementById('selected-items');
    if (selectedNames.length > 0) {
        selectedItemsSpan.innerHTML = selectedNames.map(item => `<b>${item}</b>`).join(', ');
    } else {
        selectedItemsSpan.textContent = 'Aucun sujet s√©lectionn√©.';
    }
    
    console.info("S√©lection mise √† jour. Total:", selectedItems.length);
}
// --- FONCTION DE R√âCUP√âRATION DU CONTENU R√âEL DES FICHIERS ---
async function fetchContent(path) {
    // path est maintenant le chemin complet de la STRUCTURE (ex: "Mathematiques/T1_STATISTIQUES/Statistiques.txt")
    
    // CORRECTION CL√â : On n'utilise plus de substring !
    const fullPath = `matieres/${path}`; // üëà C'EST LA LIGNE CORRECTE
    console.log(`Tentative de chargement du fichier : ${fullPath}`);
    
    try {
        const response = await fetch(fullPath);
        if (!response.ok) {
            throw new Error(`Erreur HTTP: ${response.status} pour le fichier ${fullPath}`);
        }
        // R√©cup√®re le contenu brut du fichier texte
        const content = await response.text(); 
        return content;
        
    } catch (error) {
        console.error(`√âchec du chargement du fichier ${fullPath}:`, error);
        // Afficher l'erreur dans la console de debug de la page
        document.getElementById('ai-generation-feedback').innerHTML = `<p class="error">‚ùå √âchec du chargement : ${fullPath}</p>`;
        return null; // Retourne null si le chargement √©choue
    }
}

function parseMarkdown(text) {
    if (typeof text !== 'string') return text;
    // Remplace **texte** par <span class="bold-underline">texte</span>
    return text.replace(/\*\*(.*?)\*\*/g, '<span style="font-weight: bold; text-decoration: underline;">$1</span>');
}


// --- LOGIQUE DE G√âN√âRATION ET D√âMARRAGE ---
// D√©finition des constantes pour le nombre de questions
async function startQuiz(quizType = 'mixte') {
    console.log(`[START] Fonction startQuiz() lanc√©e pour le type : ${quizType}`);
    // ----------------------------------------------------------------------
    // √âTAPE 1 : INITIALISATION ET V√âRIFICATION
    // ----------------------------------------------------------------------

    // Masquer la vue de s√©lection et afficher la vue du quiz
    document.getElementById('selection-view').style.display = 'none';
    
    // NOUVELLE LIGNE CRITIQUE : Masquer la zone des boutons de d√©marrage
    document.getElementById('start-buttons').style.display = 'none'; 
    
    document.getElementById('quiz-view').style.display = 'block';
    if (selectedItems.length === 0) {
        // Log en cas d'√©chec critique : aucun sujet s√©lectionn√©
        console.error("[START] √âCHEC: Aucun sujet s√©lectionn√©. Retour au menu.");
        alert("Veuillez s√©lectionner au moins un sujet de r√©vision.");
        return;
    }
    
    // Log de succ√®s avant le chargement (cela confirme que nous allons bien continuer)
    console.log(`[START] SUCC√àS: ${selectedItems.length} sujet(s) s√©lectionn√©(s). D√©but du chargement des fichiers.`);

    
    // R√©initialisation de toutes les donn√©es de la session pr√©c√©dente
    currentQuizData = [];
    currentQuestionIndex = 0;
    userScore = 0;
    totalQuizPoints = 0;
    isQuizRunning = true; 
    
    // Affichage imm√©diat du message de chargement
    document.getElementById('quiz-view').style.display = 'block';
    document.getElementById('selection-view').style.display = 'none';

    document.getElementById('question-container').innerHTML = `
        <h2 style="color: #007bff;">‚è≥ Pr√©paration et G√©n√©ration du Quiz...</h2>
        <p class="loading-message">Chargement des fichiers et contact avec le serveur IA.</p>
    `;
    const feedbackDiv = document.getElementById('ai-generation-feedback');
    feedbackDiv.innerHTML = '<p class="info">Chargement des fichiers...</p>'; 

    
    // ----------------------------------------------------------------------
    // √âTAPE 2 : PR√âPARATION (CHARGEMENT ET CONCAT√âNATION DE TOUT LE CONTENU)
    // ----------------------------------------------------------------------
    const loadedContents = [];
    let allContent = ""; // <-- NOUVEAU : Contient tout le texte √† envoyer √† l'IA
    
    for (const item of selectedItems) {
        if (quizType === 'dictation') {
            await generateDictationQuestion(item.path); 
            break; // Sort de la boucle si c'est une dict√©e
        }
        
        // On charge le contenu de chaque fichier s√©lectionn√©
        const content = await fetchContent(item.path); 
        if (content) {
            loadedContents.push({ content: content, name: item.name });
            allContent += `--- Contenu de ${item.name} ---\n${content}\n\n`; // CONCAT√âNATION
            feedbackDiv.innerHTML = `<p class="info">Fichier pour **${item.name}** charg√©.</p>`;
        }
    }
    
    if (loadedContents.length === 0 && quizType !== 'dictation') {
        isQuizRunning = false;
        alert("Aucun contenu de r√©vision n'a pu √™tre charg√©. V√©rifiez vos fichiers.");
        document.getElementById('quiz-view').style.display = 'none';
        document.getElementById('selection-view').style.display = 'block';
        return;
    }
    
    if (quizType === 'dictation') {
        feedbackDiv.innerHTML = '';
        isQuizRunning = false;
        if (currentQuizData.length > 0) displayCurrentQuestion();
        return;
    }


    // ----------------------------------------------------------------------
    // √âTAPE 3 : G√âN√âRATION EN UN SEUL APPEL (RAPIDE)
    // ----------------------------------------------------------------------
    
    // D√©termine le nombre de questions √† g√©n√©rer al√©atoirement (entre MIN et MAX)
    const questionsToGenerate = Math.floor(Math.random() * (MAX_QUESTIONS - MIN_QUESTIONS + 1)) + MIN_QUESTIONS;
    
    // --- GESTION DU COLD START UNIQUE ---
    feedbackDiv.innerHTML = `<p class="warn">‚è∏Ô∏è Initialisation du serveur Render (Cold Start)...</p>`;
    await delay(1500); // D√©lai d'attente unique pour le cold start
    
    feedbackDiv.innerHTML = `<p class="info">‚è≥ Contact de l'IA pour g√©n√©rer le quiz complet (**${questionsToGenerate}** questions)...</p>`;

    // Appel unique en envoyant TOUT le contenu et le nombre de questions
    const questionsArray = await generateRandomQuestionFromContent(
        allContent, 
        quizType, 
        selectedItems.map(i => i.name).join(', '),
        questionsToGenerate 
    );
    
    // ----------------------------------------------------------------------
    // √âTAPE 4 : AFFICHAGE FINAL
    // ----------------------------------------------------------------------
    isQuizRunning = false; 
    feedbackDiv.innerHTML = ''; 

// ... dans l'√âtape 4 de votre startQuiz ...

if (questionsArray && questionsArray.length > 0) {
    // Le quiz est g√©n√©r√© en une seule fois
    currentQuizData = questionsArray;
    
    // üö® AJOUTEZ CETTE LIGNE : Calcule le score total en additionnant les maxPoints de chaque question
    totalQuizPoints = currentQuizData.reduce((sum, q) => sum + (q.maxPoints || 1), 0);
    console.log(`Score total possible pour le quiz: ${totalQuizPoints} points.`);
    
    displayCurrentQuestion();
    } else {
        // En cas d'√©chec de la g√©n√©ration
        alert("L'IA n'a pu g√©n√©rer aucune question. V√©rifiez votre serveur Render et votre connexion.");
        document.getElementById('quiz-view').style.display = 'none';
        document.getElementById('selection-view').style.display = 'block';
    }
}
    
/**
 * G√©n√®re un ensemble complet de questions via un seul appel √† l'API,
 * en demandant un tableau JSON contenant toutes les questions requises.
 * @param {string} sourceContent - Le contenu de r√©vision CONCAT√âN√â de tous les sujets s√©lectionn√©s.
 * @param {string} quizType - Le type de quiz (mixte, qcm, paragraphe, etc.) pour guider l'IA.
 * @param {string} sourceNames - La liste des noms de sujets s√©par√©s par des virgules pour le contexte.
 * @param {number} numberOfQuestions - Le nombre total de questions √† g√©n√©rer.
 * @returns {Array<Object>|null} Le tableau de questions compl√®tes ou null en cas d'erreur.
 */
async function generateRandomQuestionFromContent(sourceContent, quizType, sourceNames, numberOfQuestions) {
    console.log(`D√©but de la g√©n√©ration de ${numberOfQuestions} questions de type ${quizType} pour le(s) sujet(s) : ${sourceNames}`);
    showLoading(true);

    // --- 1. D√©finition des prompts ---

    // La ligne corrig√©e est ici (utilisation de \`\`\`json pour l'√©chappement)
    const systemPrompt = `Vous √™tes un g√©n√©rateur de quiz pour des √©l√®ves de 3e. Votre r√©ponse DOIT √™tre UNIQUEMENT un tableau JSON (format JSON array) de ${numberOfQuestions} objets QuizQuestion, SANS aucun texte, commentaire, ou explication autour (pas de balises \`\`\`json). Notez les questions comme au brevet. La structure de chaque objet QuizQuestion DOIT √™tre : { type: string ('mcq', 'short_answer', ou 'long_answer'), question: string, options: array (liste des choix pour mcq, vide sinon), answer: string (la bonne r√©ponse), explanation: string (explication courte), maxPoints: number (points pour la question, 1 pour QCM/courte, 5 ou 10 pour r√©daction) }.`;

    // Le prompt 'user' d√©finit la t√¢che sp√©cifique (sujets + nombre de questions + contenu)
    let userPrompt = `En utilisant ce contenu de r√©vision : 
--- CONTENU DE R√âVISION ---
${sourceContent}
--- FIN DU CONTENU ---
G√©n√©rer un quiz complet de ${numberOfQuestions} questions de type "${quizType}" sur le(s) th√®me(s) suivant(s): "${sourceNames}".`;

    if (quizType === 'qcm') {
        userPrompt += " Toutes les questions doivent √™tre √† choix multiples (mcq), valant 1 point chacune, avec 4 options de r√©ponse.";
    } else if (quizType === 'paragraphe_ia') {
        userPrompt += " Toutes les questions doivent √™tre des questions de r√©daction (long_answer), valant 10 points chacune.";
    } else if (quizType === 'mixte') {
        userPrompt += " Le quiz doit contenir un m√©lange √©quilibr√© de questions √† choix multiples (mcq), √† r√©ponse courte (short_answer) et de r√©daction (long_answer).";
    }

    // --- 2. Construction du Payload pour le Proxy ---
    const payload = {
        prompt: {
            system: systemPrompt,
            user: userPrompt
        },
        model: "gpt-4o-mini"
    };

    // --- 3. Appel √† l'API ---
    try {
        const response = await fetch(GENERATION_API_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });

        if (!response.ok) {
            const errorData = await response.json().catch(() => ({ error: 'R√©ponse non-JSON du serveur proxy.', details: response.statusText }));
            console.error('Erreur API G√©n√©ration:', response.status, JSON.stringify(errorData));
            showError(`Erreur du serveur proxy (${response.status}) : ${errorData.details || errorData.error || response.statusText}.`);
            return null;
        }

        const data = await response.json();

        if (!data.choices || data.choices.length === 0 || !data.choices[0].message || !data.choices[0].message.content) {
            console.error('Structure de r√©ponse OpenAI invalide:', data);
            showError(`L'API a r√©pondu, mais la structure du quiz est invalide.`);
            return null;
        }

        const jsonText = data.choices[0].message.content.trim();
        // Nettoyage des balises JSON si l'IA les a ajout√©es
        const cleanedJsonText = jsonText.replace(/^```json\s*/, '').replace(/\s*```$/, '');

        // Parsing du JSON pour obtenir le tableau de questions
        const quizData = JSON.parse(cleanedJsonText);

        console.log(`Quiz g√©n√©r√© avec succ√®s. Nombre de questions: ${quizData.length}`);
        return quizData; // Renvoie le tableau complet

    } catch (error) {
        console.error('Erreur fatale lors de la communication ou du traitement JSON:', error);
        showError('Impossible de contacter le serveur ou de lire la r√©ponse (Erreur r√©seau/JSON).');
        return null;
    } finally {
        showLoading(false);
    }
}

/**
 * V√©rifie la r√©ponse pour les questions √† r√©ponse courte ou longue.
 * Met √† jour le score et affiche l'explication.
 */
function checkFreeTextAnswer() {
    const currentQuestion = currentQuizData[currentQuestionIndex];
    const correctionFeedbackDiv = document.getElementById('correction-feedback');
    const answerElement = document.getElementById('answer-box');
    
    if (!answerElement || answerElement.value.trim() === '') {
        alert("Veuillez saisir votre r√©ponse.");
        return;
    }

    const userAnswer = answerElement.value.trim();
    const correctAnswer = currentQuestion.answer;
    const maxPoints = currentQuestion.maxPoints || 1;
    let feedbackHTML = '';

    // Pour l'instant, on ne fait que comparer la pr√©sence de mots-cl√©s ou on montre la r√©ponse
    
    feedbackHTML += `<p class="alert-info">‚ÑπÔ∏è **R√©ponse Attendue :** ${parseMarkdown(correctAnswer)}</p>`;
    feedbackHTML += `<p>Explication : ${currentQuestion.explanation || "Aucune explication fournie par l'IA."}</p>`;
    feedbackHTML += `<p class="alert-warning">üí° **Auto-Correction :** Pour ce type de question, vous devez vous auto-√©valuer sur la base de la r√©ponse attendue et de l'explication. Points possibles : ${maxPoints}.</p>`;

    // Option : Vous pouvez ajouter ici un bouton pour attribuer les points manuellement.
    // Pour l'instant, on n'ajoute pas de score automatiquement pour ces questions.
    
    correctionFeedbackDiv.innerHTML = feedbackHTML;
    
    // D√©sactiver la zone de texte
    answerElement.disabled = true;

    // Masquer le bouton de validation et afficher le bouton "Question Suivante"
    const validateButton = document.querySelector('.paragraphe-sujet button');
    if (validateButton) validateButton.style.display = 'none';

    document.getElementById('next-question-btn').style.display = 'block';
}

// NOTE : Vous n'avez pas besoin de la fonction checkAnswer() (l'ancienne) si vous utilisez checkQCMAnswer() et checkFreeTextAnswer(). Vous pouvez la supprimer pour √©viter la confusion.

async function generateDictationQuestion(path) {
    const generationFeedbackDiv = document.getElementById('ai-generation-feedback');
    generationFeedbackDiv.innerHTML = '<p class="info">‚è≥ Pr√©paration de la dict√©e...</p>';
    
    const content = await fetchContent(path);
    
    // 1. Demander √† l'IA de synth√©tiser le texte en une courte dict√©e
    const systemPrompt = `√Ä partir de la le√ßon, g√©n√©rez un court texte (maximum 40 mots) sous forme de dict√©e pour un √©l√®ve de 3e. Ne donnez que le texte de la dict√©e, sans ponctuation finale.`;
    const userPrompt = `Contenu de la le√ßon:\n---\n${content}\n---\nTexte de la dict√©e :`;
    
    try {
        const response = await fetch(GENERATION_API_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ systemPrompt, userPrompt, model: "gpt-4o-mini" }) 
        });

        const aiData = await response.json();
        const dictationText = aiData.generated_content ? aiData.generated_content.trim().replace(/['"¬´¬ª]/g, '') : null;
        
        if (!dictationText || aiData.error) {
             throw new Error(aiData.error ? aiData.error.details : "Texte de dict√©e vide.");
        }

        // 2. Afficher la question de dict√©e
        currentQuizData.push({ type: 'dictation', text: dictationText, sourceName: path });
        displayCurrentQuestion();

        // 3. Demander √† l'IA de g√©n√©rer l'audio (TTS)
        await generateAndPlayTTS(dictationText);

    } catch (error) {
        console.error("Erreur lors de la pr√©paration de la dict√©e:", error);
        generationFeedbackDiv.innerHTML = `<p class="error">‚ùå Erreur lors de la pr√©paration de la dict√©e. D√©tails: ${error.message}</p>`;
    }
}

// NOTE: Cette fonction utilise la route /tts de votre serveur proxy
async function generateAndPlayTTS(text) {
    const correctionDiv = document.getElementById('correction-feedback');
    correctionDiv.innerHTML = '<p class="info">üé∂ G√©n√©ration et lecture audio en cours...</p>';
    
    // Mettre √† jour l'URL d'appel pour la fonction
    const ttsUrl = `${TTS_API_URL}`; 

    try {
        const response = await fetch(ttsUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ text: text })
        });
        
        if (response.ok) {
            // Cr√©er un blob pour l'audio et le lire
            const audioBlob = await response.blob();
            const audioUrl = URL.createObjectURL(audioBlob);
            const audio = new Audio(audioUrl);
            
            audio.play().then(() => {
                // Le bouton permet de rejouer l'audio
                correctionDiv.innerHTML = `<p class="correct">üîä √âcoutez la dict√©e et √©crivez le texte ci-dessous.</p><button onclick="generateAndPlayTTS('${text.replace(/'/g, "\\'")}')">Rejouer l'audio</button>`;
            }).catch(e => {
                correctionDiv.innerHTML = `<p class="warn">üîä **Lecture audio bloqu√©e.** Veuillez cliquer ici : <button onclick="generateAndPlayTTS('${text.replace(/'/g, "\\'")}')">Lancer l'audio</button></p>`;
                console.warn("Lecture audio bloqu√©e, n√©cessite interaction utilisateur.", e);
            });
        } else {
            correctionDiv.innerHTML = `<p class="error">‚ùå Le serveur n'a pas pu g√©n√©rer l'audio (TTS : ${response.statusText}).</p>`;
            console.error("Erreur TTS:", response.status, response.statusText);
        }

    } catch (error) {
        console.error("Erreur lors de l'appel TTS:", error);
        correctionDiv.innerHTML = `<p class="error">‚ùå Erreur de connexion pour la synth√®se vocale. D√©tails: ${error.message}</p>`;
    }
}

/**
 * Soumet la r√©ponse de l'utilisateur √† l'IA pour une correction d√©taill√©e
 * pour les questions √† r√©ponse courte ou longue.
 */
async function submitTextAnswer() {
    const currentQuestion = currentQuizData[currentQuestionIndex];
    const correctionFeedbackDiv = document.getElementById('correction-feedback');
    const answerElement = document.getElementById('answer-box');
    const validateButton = document.querySelector('.paragraphe-sujet button');
    
    if (!answerElement || answerElement.value.trim() === '') {
        alert("Veuillez saisir votre r√©ponse.");
        return;
    }

    const userAnswer = answerElement.value.trim();
    const correctAnswer = currentQuestion.answer;
    const maxPoints = currentQuestion.maxPoints || 1;
    const questionText = currentQuestion.question;

    // 1. D√©marrer l'√©tat de chargement
    validateButton.disabled = true;
    validateButton.textContent = '‚è≥ Correction en cours...';
    correctionFeedbackDiv.innerHTML = '<p class="info">Analyse de votre r√©ponse par l\'IA...</p>';

    try {
        const payload = {
            userAnswer: userAnswer,
            correctAnswer: correctAnswer,
            questionText: questionText,
            maxPoints: maxPoints
        };

        const response = await fetch(CORRECTION_API_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });

        if (!response.ok) throw new Error('Erreur r√©seau ou du serveur de correction.');

        const data = await response.json();

        // 2. Traitement du r√©sultat de l'IA
        if (data.score && data.feedback) {
            const scoreObtained = parseFloat(data.score) || 0;
            userScore += scoreObtained;

            let feedbackHTML = `<p class="alert-info">‚úÖ **Correction IA :**</p>`;
            feedbackHTML += `<p>Score obtenu : **${scoreObtained.toFixed(2)} / ${maxPoints} points**</p>`;
            feedbackHTML += `<div style="padding: 10px; border: 1px solid #ccc; background-color: #f9f9f9;">${parseMarkdown(data.feedback)}</div>`;
            feedbackHTML += `<p>R√©ponse attendue : ${parseMarkdown(currentQuestion.answer)}</p>`;
            
            correctionFeedbackDiv.innerHTML = feedbackHTML;
        } else {
            correctionFeedbackDiv.innerHTML = '<p class="error">‚ùå Erreur : L\'IA n\'a pas renvoy√© un format de correction valide.</p>';
        }

    } catch (error) {
        console.error("Erreur de correction IA :", error);
        correctionFeedbackDiv.innerHTML = `<p class="error">‚ùå Erreur lors de la correction : ${error.message}.</p>`;
    } finally {
        // 3. Finalisation de l'interface
        answerElement.disabled = true;
        validateButton.style.display = 'none';
        document.getElementById('next-question-btn').style.display = 'block';
    }
}

// --- FONCTIONS D'AFFICHAGE DU QUIZ (Spot Error inclus) ---
// (M√™me logique d'affichage que pr√©c√©demment, Spot Error est g√©r√©)

function displayCurrentQuestion() {
    // DANS function displayCurrentQuestion()

    // Ligne CRITIQUE : Masquer le bouton de validation de la question pr√©c√©dente (s'il existe)
    const validateButton = document.getElementById('validate-answer-btn'); 
    if (validateButton) {
        validateButton.style.display = 'none'; 
    }
    
    // Assurez-vous aussi que la zone de feedback est vide au d√©but de la nouvelle question
    document.getElementById('correction-feedback').innerHTML = '';

    // ... (Le reste de votre fonction pour afficher la nouvelle question)
    if (currentQuestionIndex >= currentQuizData.length) {
        showFinalScore();
        return;
    }
    
    // Nettoyage de l'interface
    const correctionFeedbackDiv = document.getElementById('correction-feedback');
    if (correctionFeedbackDiv) correctionFeedbackDiv.innerHTML = '';
    
    const nextQuestionBtn = document.getElementById('next-question-btn');
    if (nextQuestionBtn) nextQuestionBtn.style.display = 'none';

    const currentQuestion = currentQuizData[currentQuestionIndex];
    const questionContainer = document.getElementById('question-container');
    let html = '';

    const questionText = parseMarkdown(currentQuestion.question || currentQuestion.sujet || currentQuestion.text || '');
    
    html += `<h3 style="margin-bottom: 20px; text-align: right;">Question ${currentQuestionIndex + 1} sur ${currentQuizData.length} (Source : ${currentQuestion.sourceName || 'G√©n√©ration IA'})</h3>`;

    // ü•≥ CORRECTION CRITIQUE 1 : Utilisation de toLowerCase()
    const questionType = currentQuestion.type ? currentQuestion.type.toLowerCase() : 'unknown';

    switch (questionType) {
        // ü•≥ CORRECTION CRITIQUE 2 : Ajout de 'mcq' pour plus de tol√©rance
        case 'qcm':
        case 'mcq':
            html += `
                <div class="qcm-question">
                    <h3>Question √† Choix Multiples (Points: ${currentQuestion.maxPoints || 1})</h3>
                    <p class="question-text">${questionText}</p>
                    <div class="options">
                        ${currentQuestion.options.map((option) => `
                            <label>
                                <input type="radio" name="qcm_answer" value="${option}"> ${parseMarkdown(option)}
                            </label>
                        `).join('')}
                    </div>
                    <button onclick="checkFreeTextAnswer()">Valider et Afficher la Correction</button>
                </div>
            `;
            break;

        // ü•≥ CORRECTION CRITIQUE 3 : Ajout des types 'short_answer' et 'long_answer'
    case 'short_answer':
    case 'long_answer':
        // C'est ICI que l'appel est d√©fini dans le HTML g√©n√©r√© !
        html += `
            <div class="paragraphe-sujet">
                <textarea id="answer-box" rows="${questionType === 'long_answer' ? 10 : 5}" placeholder="Votre r√©ponse ici..."></textarea>
                
                <button onclick="submitTextAnswer()">Soumettre √† l'IA pour correction</button> 
            </div>
        `;
        break;

        case 'vrai_faux': 
            html += `
                <div class="vrai-faux-question">
                    <h3>Vrai ou Faux (Points: ${currentQuestion.maxPoints || 1})</h3>
                    <p class="question-text">${questionText}</p>
                    <div class="options">
                        <label>
                            <input type="radio" name="vrai_faux_answer" value="Vrai"> Vrai
                        </label>
                        <label>
                            <input type="radio" name="vrai_faux_answer" value="Faux"> Faux
                        </label>
                    </div>
                    <button onclick="checkAnswer()">Valider la r√©ponse</button>
                </div>
            `;
            break;

        case 'paragraphe_ia':
            // Ce cas g√®re votre ancien mode de correction IA avanc√©e si vous le souhaitez
            html += `
                <div class="paragraphe-sujet">
                    <h3>Sujet de R√©daction (Correction IA)</h3>
                    <p class="question-text">${questionText}</p>
                    <p style="font-style: italic; color: #555;">**Attendus :** ${currentQuestion.attendus ? currentQuestion.attendus.join(' / ') : 'Non sp√©cifi√©.'}</p>
                    <textarea id="paragraphe-answer" rows="10" placeholder="R√©digez votre paragraphe ici..."></textarea>
                    <button onclick="submitParagrapheIA('${currentQuestion.consigne_ia ? currentQuestion.consigne_ia.replace(/'/g, "\\'") : ''}')">Soumettre √† l'IA</button>
                    <div id="paragraphe-correction-ia" class="feedback-box"></div>
                </div>
            `;
            break;
            
        case 'spot_error': 
            html += `
                <div class="spot-error-question">
                    <h3>Trouver l'Erreur (Points: ${currentQuestion.maxPoints || 5})</h3>
                    <p class="question-text">${questionText}</p>
                    <div class="error-text-box feedback-box" style="border: 2px dashed #dc3545; background-color: #f8d7da; margin-bottom: 15px;">
                        <p style="font-weight: bold; margin-bottom: 5px;">√ânonc√© √† analyser :</p>
                        <p style="font-style: italic;">${parseMarkdown(currentQuestion.texte_avec_erreur)}</p>
                    </div>
                    <p>Quel est l'erreur dans cet √©nonc√© et comment doit-il √™tre corrig√© ?</p>
                    <textarea id="spot_error-answer" rows="5" placeholder="L'erreur est... La correction est..."></textarea>
                    <button onclick="checkSpotErrorAnswer()">Soumettre la correction √† l'IA</button>
                    <div id="spot_error-correction-ia" class="feedback-box"></div>
                </div>
            `;
            break;
            
        case 'dictation':
            html += `
                <div class="dictation-question">
                    <h3>Dict√©e</h3>
                    <p>La dict√©e sera jou√©e automatiquement. √âcoutez attentivement et √©crivez le texte dans la zone ci-dessous.</p>
                    <textarea id="dictation-answer" rows="5" placeholder="√âcrivez le texte de la dict√©e ici..."></textarea>
                    <button onclick="submitDictation('${currentQuestion.text.replace(/'/g, "\\'")}')">Soumettre la dict√©e</button>
                </div>
            `;
            break;

        default:
            // Affichage d√©taill√© de l'erreur pour le d√©bogage
            html = `<p class="error">Type de question inconnu. Le type re√ßu de l'IA est: <strong>${currentQuestion.type}</strong>.</p>`;
            break;
    }

    questionContainer.innerHTML = html;
}
// --- FONCTIONS DE CORRECTION ---

// Correction pour QCM et Vrai/Faux (non IA) - (Inchang√©e)
function checkAnswer() {
    const currentQuestion = currentQuizData[currentQuestionIndex];
    let userAnswer = null;
    let score = 0;
    let feedback = '';
    const resultDiv = document.getElementById('correction-feedback');
    
    if (resultDiv) resultDiv.innerHTML = '';
    
    if (currentQuestion.type === 'qcm') {
        const selected = document.querySelector('input[name="qcm_answer"]:checked');
        if (!selected) { alert("Veuillez s√©lectionner une option."); return; }
        userAnswer = selected.value;
        
        const isCorrect = (userAnswer.trim() === currentQuestion.correct_answer.trim());
        
        if (isCorrect) {
            score = currentQuestion.points;
            feedback = `<p class="correct">‚úÖ **Correct !**</p>`;
        } else {
            score = 0;
            feedback = `<p class="incorrect">‚ùå **Incorrect.** La bonne r√©ponse √©tait **${parseMarkdown(currentQuestion.correct_answer)}**.</p>`;
        }

    } 
    else if (currentQuestion.type === 'vrai_faux') { 
        const selected = document.querySelector('input[name="vrai_faux_answer"]:checked');
        if (!selected) { alert("Veuillez s√©lectionner 'Vrai' ou 'Faux'."); return; }
        userAnswer = selected.value;
        
        const isCorrect = (userAnswer.trim().toLowerCase() === currentQuestion.correct_answer.trim().toLowerCase());
        
        if (isCorrect) {
            score = currentQuestion.points;
            feedback = `<p class="correct">‚úÖ **Correct !**</p>`;
        } else {
            score = 0;
            feedback = `<p class="incorrect">‚ùå **Incorrect.** La bonne r√©ponse √©tait **${currentQuestion.correct_answer}**.</p>`;
        }
    }
    else {
        return;
    }
    
    userScore += score;
    resultDiv.innerHTML = feedback;
    document.getElementById('next-question-btn').style.display = 'block';
}

// Correction pour Spot the Error (via IA) - (Utilise le m√™me endpoint de correction que le paragraphe)
async function checkSpotErrorAnswer() {
    const currentQuestion = currentQuizData[currentQuestionIndex];
    const answerElement = document.getElementById('spot_error-answer');
    const userAnswer = answerElement ? answerElement.value.trim() : '';
    const correctionDiv = document.getElementById('spot_error-correction-ia');
    const resultDiv = document.getElementById('correction-feedback'); 

    if (userAnswer.length < 10) {
        alert("Veuillez √©crire votre correction de l'erreur.");
        return;
    }
    
    correctionDiv.innerHTML = '<p class="info">‚è≥ Envoi √† l\'IA pour √©valuation...</p>';
    
    // Le prompt doit contenir toutes les informations n√©cessaires pour l'IA
    const consigne_ia = `Vous √™tes un correcteur de quiz. La t√¢che de l'√©l√®ve √©tait de trouver l'erreur factuelle dans l'√©nonc√© suivant : "${currentQuestion.texte_avec_erreur}". L'erreur VRAIMENT attendue est : "${currentQuestion.correct_answer}". Votre r√¥le est de comparer la r√©ponse de l'√©l√®ve √† l'erreur attendue et d'√©valuer la qualit√© de sa correction sur les ${currentQuestion.points} points disponibles. Donnez des commentaires constructifs et le score obtenu.`;
    
    const userPrompt = `${consigne_ia}\nR√©ponse de l'√©l√®ve:\n---\n${userAnswer}\n---`;
    
    try {
        const response = await fetch(CORRECTION_API_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            // Le serveur s'attend √† un objet simple contenant le prompt, le serveur g√®re la structure OpenAI.
            body: JSON.stringify({ prompt: userPrompt, model: "gpt-4o-mini" }) 
        });

        const aiData = await response.json();
        
        if (aiData.error) { throw new Error(aiData.error.details || aiData.error); }

        if (aiData.correction_text) {
            const formattedCorrection = parseMarkdown(aiData.correction_text);
            correctionDiv.innerHTML = `<div class="ia-feedback">${formattedCorrection}</div>`;
            
            // Extraction du score par regex (m√©thode non id√©ale mais n√©cessaire sans JSON structur√©)
            const scoreMatch = aiData.correction_text.match(/score obtenu\s*:\s*(\d+)\s*\/\s*(\d+)/i);
            let score = 0;
            if (scoreMatch) {
                // Tenter de r√©cup√©rer le score attribu√© (scoreMatch[1])
                score = parseInt(scoreMatch[1] || 0);
            } else {
                // Fallback: si l'IA ne renvoie pas le format exact, on attribue 0 ou 1 point si la correction semble bonne
                 score = userAnswer.toLowerCase().includes(currentQuestion.correct_answer.toLowerCase().substring(0, 10)) ? 1 : 0;
            }
            
            userScore += score;
            resultDiv.innerHTML = `<p class="correct">‚úÖ **Correction IA fournie. Vous obtenez ${score} points (sur ${currentQuestion.points})**</p>`;

        } else {
            correctionDiv.innerHTML = '<p class="error">‚ùå Erreur: L\'IA n\'a pas retourn√© de correction valide.</p>';
        }

    } catch (error) {
        console.error("Erreur lors de la correction par l'IA (Spot Error):", error);
        correctionDiv.innerHTML = `<p class="error">‚ùå Erreur de connexion au serveur d'IA. D√©tails: ${error.message}</p>`;
    }
    
    document.getElementById('next-question-btn').style.display = 'block';
}


async function submitParagrapheIA(consigne_ia) {
    const answerElement = document.getElementById('paragraphe-answer');
    const userAnswer = answerElement ? answerElement.value.trim() : '';
    const correctionDiv = document.getElementById('paragraphe-correction-ia');

    if (userAnswer.length < 50) {
        alert("Veuillez r√©diger un paragraphe d'au moins 50 caract√®res.");
        return;
    }

    correctionDiv.innerHTML = '<p class="info">‚è≥ Soumission √† l\'IA pour correction d√©taill√©e (cela peut prendre quelques secondes)...</p>';
    
    const userPrompt = `${consigne_ia}\n\nParagraphe de l'√©l√®ve:\n---\n${userAnswer}\n---`;

    try {
        const response = await fetch(CORRECTION_API_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ prompt: userPrompt, model: "gpt-4o-mini" }) // Mod√®le utilis√© pour la correction
        });

        const aiData = await response.json();
        
        if (aiData.error) { throw new Error(aiData.error.details || aiData.error); }
        
        if (aiData.correction_text) {
            const formattedCorrection = parseMarkdown(aiData.correction_text);
            correctionDiv.innerHTML = `<div class="ia-feedback">${formattedCorrection}</div>`;
        } else {
            correctionDiv.innerHTML = '<p class="error">‚ùå Erreur: L\'IA n\'a pas retourn√© de correction valide.</p>';
        }

    } catch (error) {
        console.error("Erreur lors de la correction par l'IA (Paragraphe):", error);
        correctionDiv.innerHTML = `<p class="error">‚ùå Erreur de connexion au serveur d'IA. D√©tails: ${error.message}</p>`;
    }
    
    document.getElementById('next-question-btn').style.display = 'block';
}

// Dictation submission (Inchang√©e)
function submitDictation(originalText) {
    const answerElement = document.getElementById('dictation-answer');
    const userAnswer = answerElement ? answerElement.value.trim() : '';
    const resultDiv = document.getElementById('correction-feedback');

    if (userAnswer.length === 0) {
        alert("Veuillez √©crire votre dict√©e.");
        return;
    }

    const normalizedUser = userAnswer.toLowerCase().replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g,"").trim();
    const normalizedOriginal = originalText.toLowerCase().replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g,"").trim();

    if (normalizedUser === normalizedOriginal) {
        resultDiv.innerHTML = `<p class="correct">‚úÖ **Excellent !** Vous avez une orthographe et une syntaxe parfaites.</p>`;
        userScore += 1; 
        totalQuizPoints += 1;
    } else {
        resultDiv.innerHTML = `<p class="incorrect">‚ùå **Erreurs d√©tect√©es.** Votre version contient des diff√©rences.</p>
                               <p>Version attendue : **${originalText}**</p>
                               <p>Votre version : **${userAnswer}**</p>`;
        totalQuizPoints += 1;
    }
    document.getElementById('next-question-btn').style.display = 'block';
}

// --- Navigation et Score Final (Inchang√©e) ---

function nextQuestion() {
    console.log("Passage √† la question suivante.");
    document.getElementById('correction-feedback').innerHTML = '';
    document.getElementById('next-question-btn').style.display = 'none';

    currentQuestionIndex++;
    if (currentQuestionIndex < currentQuizData.length) {
        displayCurrentQuestion();
    } else {
        showFinalScore();
    }
}

function showFinalScore() {
    console.log("Fin du quiz. Score utilisateur:", userScore, "Total points possibles:", totalQuizPoints);
    let feedback = `<h2>üéâ Quiz termin√© !</h2>`;
    
    if (totalQuizPoints > 0) {
        const finalNote = (userScore / totalQuizPoints) * 20; 
        const finalNoteRounded = finalNote.toFixed(2);
        
        feedback += `<p>Votre performance globale est de **${userScore.toFixed(2)} / ${totalQuizPoints} points**.</p>`;
        feedback += `<h3>Votre note estim√©e sur 20 est : **${finalNoteRounded} / 20**</h3>`;
    } else {
         feedback += `<p>Ce quiz contenait principalement des sujets de r√©daction ou des erreurs dans le calcul du score total.</p>`;
    }

    document.getElementById('question-container').innerHTML = feedback + '<button onclick="window.location.reload()">Recommencer un quiz</button>';
}
