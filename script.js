// script.js
window.onerror = function(msg, url, line, col, error) {
  document.getElementById('debug').textContent =
    "Erreur JS : " + msg + "\nLigne: " + line + "\n" + (error ? error.stack : "");
};
console.log("script.js charg√©."); // Log au chargement du script

const MATIERES_BASE_PATH = 'matieres';
let config = {};
let selectedItems = []; // Tableau pour stocker les objets de s√©lection { path, typeToGenerate, displayName }
let currentQuizData = []; // Donn√©es des questions pour le quiz actuel
let currentQuestionIndex = 0;

// URL de votre serveur proxy s√©curis√© sur Render (avec les NOUVELLES routes)
const BASE_API_URL = 'https://cle-api.onrender.com';
const CORRECTION_API_URL = `${BASE_API_URL}/correction`;
const GENERATION_API_URL = `${BASE_API_URL}/generation`;

console.log("BASE_API_URL:", BASE_API_URL);
console.log("CORRECTION_API_URL:", CORRECTION_API_URL);
console.log("GENERATION_API_URL:", GENERATION_API_URL);


// --- Gestion de la structure des mati√®res ---
// Chaque le√ßon est maintenant un objet qui sp√©cifie le type de contenu √† g√©n√©rer
// et pointe vers un fichier .txt
const STRUCTURE = {
    "Mathematiques": {
        "Nombres_Premiers": [
            { name: "Le√ßon Nombres Premiers", file: "lecon_nombres_premiers.txt", type: "qcm" }
        ],
        "Les_Aires": [
            { name: "Le√ßon Les Aires", file: "lecon_les_aires.txt", type: "qcm" }
        ]
    },
    "Histoire_Geo": {
        "La_Revolution_Francaise": [
            { name: "Le√ßon R√©volution Fran√ßaise", file: "lecon_revolution_francaise.txt", type: "paragraphe_ia" }
        ],
        "Les_Fleuves_du_Monde": [
            { name: "Le√ßon Fleuves du Monde", file: "lecon_fleuves_monde.txt", type: "qcm" }
        ]
    },
    "Allemand": {
        "Vocabulaire_Facile": [
            { name: "Le√ßon Vocabulaire Facile", file: "lecon_vocabulaire_facile.txt", type: "qcm" }
        ],
        "Grammaire_Base": [
            { name: "Le√ßon Grammaire de Base", file: "lecon_grammaire_base.txt", type: "qcm" }
        ]
    }
};

// --- Initialisation et chargement des ressources ---

// Ton gestionnaire d'erreurs global
window.onerror = function(msg, url, line, col, error) {
    const debugElement = document.getElementById('debug');
    if (debugElement) {
        debugElement.textContent =
            "Erreur JS : " + msg + "\nLigne: " + line + "\n" + (error ? error.stack : "");
        console.error("Global JS Error:", msg, url, line, col, error);
    } else {
        console.error("Global JS Error (debug element not found):", msg, url, line, col, error);
    }
    return true; // Emp√™che l'erreur de se propager aux outils de d√©veloppement (optionnel)
};

document.addEventListener('DOMContentLoaded', () => {
    console.log("DOM content charg√©. Initialisation...");

    fetch('config.json')
        .then(response => {
            console.log("R√©ponse de config.json re√ßue.");
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            config = data;
            console.log('Configuration charg√©e:', config);
            loadStructure();
        })
        .catch(error => {
            console.error("Erreur de chargement de config.json ou de parsing JSON:", error);
            loadStructure(); // Tente de charger la structure m√™me sans config.json
        });

    document.getElementById('start-quiz-btn').addEventListener('click', startQuiz);
    
    // Ajout des √©couteurs pour les boutons de g√©n√©ration IA al√©atoire
    const generateQCMBtn = document.getElementById('generate-qcm-btn');
    const generateParagrapheBtn = document.getElementById('generate-paragraphe-btn');

    if (generateQCMBtn) {
        generateQCMBtn.addEventListener('click', () => generateContentFromAI('qcm'));
        console.log("√âcouteur pour 'G√©n√©rer QCM Al√©atoire' attach√©.");
    } else {
        console.warn("Bouton 'generate-qcm-btn' non trouv√©.");
    }

    if (generateParagrapheBtn) {
        generateParagrapheBtn.addEventListener('click', () => generateContentFromAI('paragraphe_ia'));
        console.log("√âcouteur pour 'G√©n√©rer Paragraphe Al√©atoire' attach√©.");
    } else {
        console.warn("Bouton 'generate-paragraphe-btn' non trouv√©.");
    }
    console.log("√âcouteurs d'√©v√©nements attach√©s.");
});


// --- Gestion de la structure des mati√®res (Affichage) ---

function loadStructure() {
    console.log("D√©but du chargement de la structure des mati√®res...");
    const menuContainer = document.getElementById('menu-container');
    if (!menuContainer) {
        console.error("Conteneur de menu (#menu-container) non trouv√©.");
        return;
    }
    menuContainer.innerHTML = '';

    for (const matiere in STRUCTURE) {
        console.log("Ajout de la mati√®re:", matiere);
        const matiereDiv = document.createElement('div');
        matiereDiv.className = 'matiere';
        matiereDiv.innerHTML = `<h2>${matiere}</h2>`;

        const chapitresList = document.createElement('ul');

        for (const chapitre in STRUCTURE[matiere]) {
            console.log("  Ajout du chapitre:", chapitre);
            const chapitreLi = document.createElement('li');
            chapitreLi.innerHTML = `<h3>${chapitre.replace(/_/g, ' ')}</h3>`; // Affiche le nom sans underscore

            const itemsList = document.createElement('ul');
            STRUCTURE[matiere][chapitre].forEach(itemConfig => { // itemConfig est maintenant { name, file, type }
                console.log("    Ajout de l'√©l√©ment de le√ßon:", itemConfig.name, "(type:", itemConfig.type, ")");
                const itemLi = document.createElement('li');
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                
                // Chemin complet du fichier de la le√ßon
                const fullPath = `${MATIERES_BASE_PATH}/${matiere}/${chapitre}/${itemConfig.file}`;
                // Stocker l'objet complet de la s√©lection dans la valeur de la checkbox
                checkbox.value = JSON.stringify({ path: fullPath, typeToGenerate: itemConfig.type, displayName: itemConfig.name });
                checkbox.id = fullPath.replace(/[^a-zA-Z0-9]/g, '_'); // ID unique et valide pour HTML
                
                checkbox.addEventListener('change', updateSelection);

                const label = document.createElement('label');
                label.htmlFor = checkbox.id; // Lier le label √† l'ID de la checkbox
                label.textContent = itemConfig.name; // Afficher le nom convivial
                label.title = `G√©n√©rera un ${itemConfig.type.replace('_ia', '')} √† partir de cette le√ßon.`;

                itemLi.appendChild(checkbox);
                itemLi.appendChild(label);
                itemsList.appendChild(itemLi);
            });

            chapitreLi.appendChild(itemsList);
            chapitresList.appendChild(chapitreLi);
        }

        matiereDiv.appendChild(chapitresList);
        menuContainer.appendChild(matiereDiv);
    }
    console.log("Structure des mati√®res charg√©e.");
}

function updateSelection(event) {
    const selectionData = JSON.parse(event.target.value); // Parser l'objet stock√©
    if (event.target.checked) {
        selectedItems.push(selectionData);
        console.log("S√©lection ajout√©e:", selectionData);
    } else {
        selectedItems = selectedItems.filter(item => item.path !== selectionData.path);
        console.log("S√©lection retir√©e:", selectionData);
    }
    console.log("√âl√©ments actuellement s√©lectionn√©s:", selectedItems);
    
    const selectionDisplay = document.getElementById('selected-items');
    if (selectionDisplay) {
        // Afficher quelque chose de significatif, ex: "QCM from Le√ßon Nombres Premiers"
        selectionDisplay.textContent = selectedItems.map(s => `${s.typeToGenerate.replace('_ia', '').toUpperCase()} from "${s.displayName}"`).join(' | ');
    } else {
        console.warn("√âl√©ment 'selected-items' non trouv√© pour l'affichage de la s√©lection.");
    }
}

// --- Logique du Quiz/Paragraphe ---

async function startQuiz() {
    console.log("D√©marrage de la fonction startQuiz.");
    if (selectedItems.length === 0) {
        alert("Veuillez s√©lectionner au moins une le√ßon √† partir de laquelle g√©n√©rer !");
        console.warn("startQuiz annul√©: aucun √©l√©ment s√©lectionn√©.");
        return;
    }
    
    const selectionView = document.getElementById('selection-view');
    const quizView = document.getElementById('quiz-view');
    const generationFeedbackDiv = document.getElementById('ai-generation-feedback'); // Pour les messages de g√©n√©ration
    
    if (!(selectionView && quizView && generationFeedbackDiv)) {
        console.error("√âl√©ments 'selection-view', 'quiz-view' ou 'ai-generation-feedback' non trouv√©s.");
        return;
    }
    
    // Afficher la vue du quiz et les messages de g√©n√©ration en attendant
    selectionView.style.display = 'none';
    quizView.style.display = 'block';
    generationFeedbackDiv.style.display = 'block'; // S'assurer qu'il est visible pendant la g√©n√©ration
    generationFeedbackDiv.innerHTML = '<p>üß† Pr√©paration des questions par l\'IA...</p>';

    currentQuizData = []; // R√©initialise les donn√©es du quiz

    for (const selection of selectedItems) { // Chaque s√©lection est un objet { path, typeToGenerate, displayName }
        generationFeedbackDiv.innerHTML = `<p>üß† G√©n√©ration de ${selection.typeToGenerate.replace('_ia', '').toUpperCase()} √† partir de la le√ßon "${selection.displayName}"...</p>`;
        try {
            console.log("Chargement du contenu de la le√ßon depuis:", selection.path);
            const response = await fetch(selection.path);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status} for ${selection.path}`);
            }
            const lessonContent = await response.text(); // Lit le contenu comme du texte brut
            console.log("Contenu de la le√ßon charg√© (d√©but):", lessonContent.substring(0, Math.min(lessonContent.length, 100)) + (lessonContent.length > 100 ? "..." : ""));

            // Pr√©parer le prompt pour l'IA, incluant le contenu de la le√ßon
            let promptTextForGeneration;
            if (selection.typeToGenerate === 'qcm') {
                promptTextForGeneration = `Vous √™tes un g√©n√©rateur de quiz pour des √©l√®ves de 3√®me. Cr√©ez UN QCM de niveau coll√®ge (3√®me) avec 4 options de r√©ponse et une explication pour la bonne r√©ponse, en vous basant STRICTEMENT et UNIQUEMENT sur le texte de la le√ßon ci-dessous. Le QCM doit √™tre au format JSON pr√™t √† √™tre utilis√© par mon application. R√©pondez UNIQUEMENT avec l'objet JSON.
                Le√ßon:\n${lessonContent}\n
                Exemple de format : { "type": "qcm", "question": "...", "options": ["...","...","...","..."], "reponse_correcte": "...", "explication": "..." }`;
            } else if (selection.typeToGenerate === 'paragraphe_ia') {
                promptTextForGeneration = `Vous √™tes un concepteur de sujets d'examen pour des √©l√®ves de 3√®me. G√©n√©rez UN sujet de paragraphe argument√© de niveau coll√®ge (3√®me) en vous basant STRICTEMENT et UNIQUEMENT sur le texte de la le√ßon ci-dessous. Incluez 3 √† 4 attendus pour ce paragraphe et une consigne sp√©cifique pour la correction par l'IA. R√©pondez UNIQUEMENT avec l'objet JSON.
                Le√ßon:\n${lessonContent}\n
                Exemple de format : { "type": "paragraphe_ia", "sujet": "...", "attendus": ["...", "...", "..."], "consigne_ia": "Corrigez ce paragraphe argument√© d'un √©l√®ve de 3√®me. Donnez une note sur 10 et des commentaires constructifs sur l'argumentation, la structure et la ma√Ætrise du sujet." }`;
            } else {
                console.warn("Type de g√©n√©ration inconnu pour la s√©lection:", selection);
                generationFeedbackDiv.innerHTML += `<p class="error">‚ùå Type de g√©n√©ration inconnu pour "${selection.displayName}".</p>`;
                continue; // Passe √† l'√©l√©ment suivant
            }

            console.log("Appel √† l'API de g√©n√©ration avec la le√ßon. Prompt (d√©but):", promptTextForGeneration.substring(0, Math.min(promptTextForGeneration.length, 200)) + (promptTextForGeneration.length > 200 ? "..." : ""));
            const aiGeneratedResponse = await fetch(GENERATION_API_URL, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ prompt: promptTextForGeneration }),
            });

            console.log("R√©ponse de l'API de g√©n√©ration re√ßue pour le√ßon. Statut:", aiGeneratedResponse.status);

            if (!aiGeneratedResponse.ok) {
                const errorData = await aiGeneratedResponse.json().catch(() => ({error: 'R√©ponse AI non-JSON ou vide.'}));
                throw new Error(`Erreur API Render lors de la g√©n√©ration (status ${aiGeneratedResponse.status}): ${errorData.error || aiGeneratedResponse.statusText}`);
            }

            const aiData = await aiGeneratedResponse.json();
            console.log("Donn√©es de l'API de g√©n√©ration pars√©es pour le√ßon:", aiData);
            
            if (aiData.generated_content) {
                console.log("Cha√Æne JSON g√©n√©r√©e par l'IA √† partir de le√ßon:", aiData.generated_content);
                const generatedQuestion = JSON.parse(aiData.generated_content);
                
                // Si l'IA renvoie un tableau de questions (ex: pour un QCM multiple), ou un seul objet
                if (Array.isArray(generatedQuestion)) {
                    currentQuizData.push(...generatedQuestion);
                } else {
                    currentQuizData.push(generatedQuestion);
                }
                console.log("Question(s) g√©n√©r√©e(s) par l'IA √† partir de la le√ßon:", generatedQuestion);
            } else {
                console.error("R√©ponse de g√©n√©ration AI incompl√®te: 'generated_content' manquant pour le√ßon.", aiData);
                generationFeedbackDiv.innerHTML += `<p class="error">‚ùå √âchec de g√©n√©ration pour "${selection.displayName}".</p>`;
            }
        } catch (error) {
            console.error(`Erreur lors du traitement de la le√ßon "${selection.displayName}":`, error);
            generationFeedbackDiv.innerHTML += `<p class="error">‚ùå Erreur grave pour "${selection.displayName}": ${error.message}</p>`;
        }
    }
    
    generationFeedbackDiv.innerHTML = ''; // Nettoyer les messages de g√©n√©ration apr√®s tout
    generationFeedbackDiv.style.display = 'none'; // Cacher le feedback une fois la g√©n√©ration termin√©e

    if (currentQuizData.length === 0) {
        alert("Aucune question n'a pu √™tre g√©n√©r√©e. Veuillez v√©rifier vos s√©lections ou l'API de g√©n√©ration.");
        // Revenir √† la vue de s√©lection ou afficher un message d'erreur persistant
        quizView.style.display = 'none';
        selectionView.style.display = 'block';
        console.warn("startQuiz termin√©: aucune question g√©n√©r√©e.");
        return;
    }

    currentQuizData.sort(() => Math.random() - 0.5); // M√©langer les questions g√©n√©r√©es
    console.log("Toutes les questions des le√ßons ont √©t√© g√©n√©r√©es et m√©lang√©es. Total:", currentQuizData.length, "questions.");

    currentQuestionIndex = 0;
    displayCurrentQuestion();
    console.log("Quiz d√©marr√© avec la premi√®re question g√©n√©r√©e.");
}

function displayCurrentQuestion() {
    console.log("Affichage de la question actuelle. Index:", currentQuestionIndex, "/", currentQuizData.length);
    const questionContainer = document.getElementById('question-container');
    if (!questionContainer) {
        console.error("Conteneur de question (#question-container) non trouv√©.");
        return;
    }
    
    const questionData = currentQuizData[currentQuestionIndex];

    if (!questionData) {
        console.log("Fin des questions disponibles. Affichage du message de fin.");
        questionContainer.innerHTML = `<h2>Bravo, vous avez termin√© la r√©vision !</h2>
            <button onclick="window.location.reload()">Recommencer</button>`;
        return;
    }
    
    let html = `<h3>Question ${currentQuestionIndex + 1} / ${currentQuizData.length}</h3>`;
    
    if (questionData.type === 'qcm') {
        console.log("Affichage d'un QCM:", questionData.question);
        html += `<div class="qcm-question"><h4>${questionData.question}</h4>`;
        
        questionData.options.forEach((option, index) => {
            html += `<label>
                        <input type="radio" name="qcm-answer" value="${option}" id="qcm-option-${index}">
                        ${option}
                    </label><br>`;
        });
        
        html += `<button onclick="submitQCM()">Valider</button></div>`;
        
    } else if (questionData.type === 'paragraphe_ia') {
        console.log("Affichage d'un sujet de paragraphe IA:", questionData.sujet);
        html += `<div class="paragraphe-sujet"><h4>Sujet : ${questionData.sujet}</h4>
                 <p>Attendus : ${questionData.attendus.join(', ')}</p>
                 <textarea id="ia-answer" rows="10" placeholder="√âcrivez votre paragraphe argument√© ici..."></textarea>
                 <button onclick="submitParagrapheIA()">Envoyer √† l'IA pour correction</button></div>`;
    } else {
        console.warn("Type de question inconnu:", questionData.type, "pour les donn√©es:", questionData);
        html += `<p class="error">Type de question inconnu. Impossible d'afficher.</p>`;
    }

    questionContainer.innerHTML = html;
    
    const correctionFeedbackDiv = document.getElementById('correction-feedback');
    if (correctionFeedbackDiv) {
        correctionFeedbackDiv.innerHTML = '';
    } else {
        console.warn("√âl√©ment 'correction-feedback' non trouv√©.");
    }

    const nextQuestionBtn = document.getElementById('next-question-btn');
    if (nextQuestionBtn) {
        nextQuestionBtn.style.display = 'none';
    } else {
        console.warn("Bouton 'next-question-btn' non trouv√©.");
    }
}

// --- Fonctions de Soumission et Correction ---

function submitQCM() {
    console.log("Soumission du QCM...");
    const questionData = currentQuizData[currentQuestionIndex];
    const selected = document.querySelector('input[name="qcm-answer"]:checked');
    const resultDiv = document.getElementById('correction-feedback');
    
    if (!selected) {
        alert("Veuillez s√©lectionner une r√©ponse.");
        console.warn("Validation QCM annul√©e: aucune r√©ponse s√©lectionn√©e.");
        return;
    }
    
    const userAnswer = selected.value;
    console.log("R√©ponse utilisateur QCM:", userAnswer);
    console.log("R√©ponse correcte attendue:", questionData.reponse_correcte);

    if (!resultDiv) {
        console.error("√âl√©ment 'correction-feedback' non trouv√©.");
        return;
    }
    
    if (userAnswer === questionData.reponse_correcte) {
        resultDiv.innerHTML = '<p class="correct">‚úÖ Bonne r√©ponse !</p>';
        console.log("R√©ponse QCM correcte.");
    } else {
        let feedback = `<p class="incorrect">‚ùå Faux. La bonne r√©ponse √©tait : <strong>${questionData.reponse_correcte}</strong>.</p>`;
        if (questionData.explication) {
            feedback += `<p>Explication : ${questionData.explication}</p>`;
        }
        resultDiv.innerHTML = feedback;
        console.log("R√©ponse QCM incorrecte. Explication:", questionData.explication || "Aucune.");
    }

    const nextQuestionBtn = document.getElementById('next-question-btn');
    if (nextQuestionBtn) {
        nextQuestionBtn.style.display = 'block';
    }
}

// Fonction qui appelle votre proxy Render s√©curis√© sur la route /correction
async function callCorrectionAPI(prompt) {
    console.log("Appel √† l'API de correction. Prompt envoy√© (d√©but):", prompt.substring(0, Math.min(prompt.length, 200)) + (prompt.length > 200 ? "..." : ""));
    try {
        const response = await fetch(CORRECTION_API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                prompt: prompt // On envoie le prompt que votre serveur Render attend
            }),
        });
        console.log("R√©ponse de l'API de correction re√ßue. Statut:", response.status);
        
        if (!response.ok) {
            const errorData = await response.json().catch(() => ({error: 'R√©ponse serveur non-JSON ou vide.'}));
            console.error("Erreur brute de l'API de correction:", errorData);
            throw new Error(`Erreur API Render (${response.status}): ${errorData.error || response.statusText}`);
        }
        
        const data = await response.json();
        console.log("Donn√©es de l'API de correction pars√©es:", data);
        
        if (data.correction_text) {
            return data.correction_text;
        } else {
            console.error("R√©ponse de l'API incompl√®te ou mal form√©e pour la correction:", data);
            return "L'IA n'a pas pu g√©n√©rer de correction pour le moment. R√©ponse inattendue du serveur.";
        }
    } catch (error) {
        console.error("Erreur lors de l'appel r√©seau ou du parsing de l'API de correction:", error);
        throw error; // Rejette l'erreur pour qu'elle soit g√©r√©e plus haut
    }
}


async function submitParagrapheIA() {
    console.log("Soumission du paragraphe pour correction IA...");
    const questionData = currentQuizData[currentQuestionIndex];
    const userAnswer = document.getElementById('ia-answer')?.value.trim(); // Utilisation de l'op√©rateur optionnel chaining
    const resultDiv = document.getElementById('correction-feedback');

    if (!userAnswer || userAnswer.length < 50) {
        alert("Veuillez √©crire un paragraphe plus long (minimum 50 caract√®res).");
        console.warn("Validation paragraphe annul√©e: texte trop court ou vide.");
        return;
    }
    if (!resultDiv) {
        console.error("√âl√©ment 'correction-feedback' non trouv√©.");
        return;
    }
    
    resultDiv.innerHTML = '<p>Correction par l\'IA en cours... üß†</p>';
    console.log("Paragraphe utilisateur soumis (d√©but):", userAnswer.substring(0, Math.min(userAnswer.length, 100)) + (userAnswer.length > 100 ? "..." : ""));
    
    // Le prompt contient la consigne pour l'IA et la r√©ponse de l'√©l√®ve
    const prompt = `${questionData.consigne_ia}\n\nTexte de l'√©l√®ve √† corriger:\n\n---\n${userAnswer}\n---`;
    
    try {
        const responseText = await callCorrectionAPI(prompt); 
        console.log("Correction de l'IA re√ßue (d√©but):", responseText.substring(0, Math.min(responseText.length, 200)) + (responseText.length > 200 ? "..." : ""));
        
        // On remplace les sauts de ligne (\n) par des balises <br> pour un meilleur affichage HTML
        const formattedText = responseText.replace(/\n/g, '<br>');
        
        resultDiv.innerHTML = `<div class="ia-feedback">${formattedText}</div>`;
        const nextQuestionBtn = document.getElementById('next-question-btn');
        if (nextQuestionBtn) {
            nextQuestionBtn.style.display = 'block';
        }
        console.log("Correction IA affich√©e.");

    } catch (error) {
        console.error("Erreur lors de la correction par l'IA:", error);
        resultDiv.innerHTML = `<p class="error">‚ùå Erreur de connexion √† l'IA. V√©rifiez votre service Render. D√©tails: ${error.message}</p>`;
    }
}

// Fonction pour g√©n√©rer du contenu al√©atoire (via les boutons d√©di√©s)
async function generateContentFromAI(contentType) {
    console.log("D√©but de la g√©n√©ration de contenu par l'IA (al√©atoire). Type demand√©:", contentType);
    const generationFeedbackDiv = document.getElementById('ai-generation-feedback');
    if (!generationFeedbackDiv) {
        console.error("√âl√©ment 'ai-generation-feedback' non trouv√©.");
        return;
    }
    
    // Afficher la vue du quiz et les messages de g√©n√©ration en attendant
    document.getElementById('selection-view').style.display = 'none';
    document.getElementById('quiz-view').style.display = 'block';
    generationFeedbackDiv.style.display = 'block';
    generationFeedbackDiv.innerHTML = '<p>üß† S√©lection d\'une le√ßon al√©atoire et g√©n√©ration par l\'IA...</p>';
    
    // 1. Collecter toutes les le√ßons disponibles qui correspondent au type de contenu
    const allLessons = [];
    for (const matiere in STRUCTURE) {
        for (const chapitre in STRUCTURE[matiere]) {
            STRUCTURE[matiere][chapitre].forEach(itemConfig => {
                if (itemConfig.type === contentType) {
                    const fullPath = `${MATIERES_BASE_PATH}/${matiere}/${chapitre}/${itemConfig.file}`;
                    allLessons.push({ path: fullPath, typeToGenerate: itemConfig.type, displayName: itemConfig.name });
                }
            });
        }
    }

    if (allLessons.length === 0) {
        generationFeedbackDiv.innerHTML = `<p class="error">‚ùå Aucune le√ßon de type "${contentType.replace('_ia', '')}" trouv√©e pour la g√©n√©ration al√©atoire.</p>`;
        console.warn("Aucune le√ßon trouv√©e pour la g√©n√©ration al√©atoire de type:", contentType);
        // Revenir √† la vue de s√©lection
        document.getElementById('quiz-view').style.display = 'none';
        document.getElementById('selection-view').style.display = 'block';
        return;
    }

    // 2. Choisir une le√ßon al√©atoirement
    const randomLesson = allLessons[Math.floor(Math.random() * allLessons.length)];
    console.log("Le√ßon al√©atoire s√©lectionn√©e:", randomLesson);
    generationFeedbackDiv.innerHTML = `<p>üß† G√©n√©ration de ${randomLesson.typeToGenerate.replace('_ia', '').toUpperCase()} √† partir de la le√ßon al√©atoire "${randomLesson.displayName}"...</p>`;

    try {
        // 3. Charger le contenu de la le√ßon al√©atoire
        console.log("Chargement du contenu de la le√ßon al√©atoire depuis:", randomLesson.path);
        const response = await fetch(randomLesson.path);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status} for ${randomLesson.path}`);
        }
        const lessonContent = await response.text(); // Lit le contenu comme du texte brut
        console.log("Contenu de la le√ßon al√©atoire charg√© (d√©but):", lessonContent.substring(0, Math.min(lessonContent.length, 100)) + (lessonContent.length > 100 ? "..." : ""));

        // 4. Pr√©parer le prompt pour l'IA, incluant le contenu de la le√ßon al√©atoire
        let promptTextForGeneration;
        if (contentType === 'qcm') {
            promptTextForGeneration = `Vous √™tes un g√©n√©rateur de quiz pour des √©l√®ves de 3√®me. Cr√©ez UN QCM de niveau coll√®ge (3√®me) avec 4 options de r√©ponse et une explication pour la bonne r√©ponse, en vous basant STRICTEMENT et UNIQUEMENT sur le texte de la le√ßon ci-dessous. Le QCM doit √™tre au format JSON pr√™t √† √™tre utilis√© par mon application. R√©pondez UNIQUEMENT avec l'objet JSON.
            Le√ßon:\n${lessonContent}\n
            Exemple de format : { "type": "qcm", "question": "...", "options": ["...","...","...","..."], "reponse_correcte": "...", "explication": "..." }`;
        } else if (contentType === 'paragraphe_ia') {
            promptTextForGeneration = `Vous √™tes un concepteur de sujets d'examen pour des √©l√®ves de 3√®me. G√©n√©rez UN sujet de paragraphe argument√© de niveau coll√®ge (3√®me) en vous basant STRICTEMENT et UNIQUEMENT sur le texte de la le√ßon ci-dessous. Incluez 3 √† 4 attendus pour ce paragraphe et une consigne sp√©cifique pour la correction par l'IA. R√©pondez UNIQUEMENT avec l'objet JSON.
            Le√ßon:\n${lessonContent}\n
            Exemple de format : { "type": "paragraphe_ia", "sujet": "...", "attendus": ["...", "...", "..."], "consigne_ia": "Corrigez ce paragraphe argument√© d'un √©l√®ve de 3√®me. Donnez une note sur 10 et des commentaires constructifs sur l'argumentation, la structure et la ma√Ætrise du sujet." }`;
        } else {
            // Cette branche ne devrait pas √™tre atteinte car contentType est d√©j√† filtr√©
            generationFeedbackDiv.innerHTML = '<p class="error">Type de contenu inconnu pour la g√©n√©ration IA.</p>';
            console.warn("Type de contenu IA inconnu:", contentType);
            return;
        }

        console.log("Prompt pr√©par√© pour l'API de g√©n√©ration (al√©atoire, d√©but):", promptTextForGeneration.substring(0, Math.min(promptTextForGeneration.length, 200)) + (promptTextForGeneration.length > 200 ? "..." : ""));

        const aiGeneratedResponse = await fetch(GENERATION_API_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ prompt: promptTextForGeneration }),
        });
        console.log("R√©ponse de l'API de g√©n√©ration re√ßue (al√©atoire). Statut:", aiGeneratedResponse.status);

        if (!aiGeneratedResponse.ok) {
            const errorData = await aiGeneratedResponse.json().catch(() => ({error: 'R√©ponse serveur non-JSON ou vide.'}));
            throw new Error(`Erreur API Render (${aiGeneratedResponse.status}): ${errorData.error || aiGeneratedResponse.statusText}`);
        }

        const aiData = await aiGeneratedResponse.json();
        console.log("Donn√©es de l'API de g√©n√©ration pars√©es (al√©atoire):", aiData);
        
        if (aiData.generated_content) {
            console.log("Cha√Æne JSON g√©n√©r√©e par l'IA (al√©atoire):", aiData.generated_content);
            const generatedQuestion = JSON.parse(aiData.generated_content);
            
            if (generatedQuestion.type === contentType) {
                console.log("Contenu g√©n√©r√© par l'IA pars√© et valid√© (al√©atoire):", generatedQuestion);
                currentQuizData = [generatedQuestion]; // Remplace les questions actuelles par celle g√©n√©r√©e
                selectedItems = []; // R√©initialise les √©l√©ments s√©lectionn√©s
                currentQuestionIndex = 0;
                
                generationFeedbackDiv.innerHTML = ''; // Nettoie le feedback
                generationFeedbackDiv.style.display = 'none'; // Cacher le feedback une fois la g√©n√©ration termin√©e
                console.log("Vue bascul√©e sur le quiz avec la question al√©atoire g√©n√©r√©e.");
                displayCurrentQuestion(); // Affiche la question g√©n√©r√©e
            } else {
                 generationFeedbackDiv.innerHTML = '<p class="error">‚ùå L\'IA a g√©n√©r√© un type de contenu inattendu.</p>';
                 console.error("Le type de contenu g√©n√©r√© par l'IA ne correspond pas au type demand√©. Attendu:", contentType, "Re√ßu:", generatedQuestion.type);
            }
        } else {
            console.error("R√©ponse de l'API de g√©n√©ration incompl√®te ou mal form√©e (al√©atoire): 'generated_content' manquant.", aiData);
            generationFeedbackDiv.innerHTML = '<p class="error">‚ùå L\'IA n\'a pas pu g√©n√©rer le contenu. R√©ponse inattendue du serveur.</p>';
        }

    } catch (error) {
        console.error("Erreur lors de la g√©n√©ration par l'IA (al√©atoire):", error);
        generationFeedbackDiv.innerHTML = `<p class="error">‚ùå Erreur de connexion √† l'IA ou format de r√©ponse invalide. D√©tails: ${error.message}</p>`;
        // En cas d'erreur grave, on pourrait vouloir revenir √† la s√©lection
        document.getElementById('quiz-view').style.display = 'none';
        document.getElementById('selection-view').style.display = 'block';
    }
}


// --- Navigation ---

function nextQuestion() {
    console.log("Passage √† la question suivante.");
    const correctionFeedbackDiv = document.getElementById('correction-feedback');
    if (correctionFeedbackDiv) {
        correctionFeedbackDiv.innerHTML = '';
    }
    const nextQuestionBtn = document.getElementById('next-question-btn');
    if (nextQuestionBtn) {
        nextQuestionBtn.style.display = 'none';
    }

    currentQuestionIndex++;
    displayCurrentQuestion();
}
